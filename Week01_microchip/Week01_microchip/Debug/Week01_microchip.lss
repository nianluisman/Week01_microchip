
Week01_microchip.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00000878  0000090c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000878  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000102  0080013c  0080013c  00000948  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000098d  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000079a  00000000  00000000  000013b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003be  00000000  00000000  00001b53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001f14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044f  00000000  00000000  00002028  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000033b  00000000  00000000  00002477  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000027b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 06 01 	jmp	0x20c	; 0x20c <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_20>
  54:	0c 94 18 01 	jmp	0x230	; 0x230 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e7       	ldi	r30, 0x78	; 120
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 33       	cpi	r26, 0x3C	; 60
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ac e3       	ldi	r26, 0x3C	; 60
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 33       	cpi	r26, 0x3E	; 62
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 84 00 	call	0x108	; 0x108 <main>
  9e:	0c 94 3a 04 	jmp	0x874	; 0x874 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <appendSerial>:
}
 


 void appendSerial(char c){//read out string one char at the time 
	serialbufffer[serialWritePos] = c;
  a6:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <__data_end>
  aa:	e9 2f       	mov	r30, r25
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	e2 54       	subi	r30, 0x42	; 66
  b0:	fe 4f       	sbci	r31, 0xFE	; 254
  b2:	80 83       	st	Z, r24
	serialWritePos++;
  b4:	9f 5f       	subi	r25, 0xFF	; 255
  b6:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <__data_end>
	
	if(serialWritePos >= TX_BUFFER_size){
  ba:	99 23       	and	r25, r25
  bc:	14 f4       	brge	.+4      	; 0xc2 <appendSerial+0x1c>
		serialWritePos = 0;
  be:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__data_end>
  c2:	08 95       	ret

000000c4 <serialWrite>:
	}
}
void serialWrite(char c[]){ //get string in to buffer 
  c4:	1f 93       	push	r17
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(c); i++){
  cc:	10 e0       	ldi	r17, 0x00	; 0
  ce:	07 c0       	rjmp	.+14     	; 0xde <serialWrite+0x1a>
		appendSerial(c[i]);
  d0:	fe 01       	movw	r30, r28
  d2:	e8 0f       	add	r30, r24
  d4:	f9 1f       	adc	r31, r25
  d6:	80 81       	ld	r24, Z
  d8:	0e 94 53 00 	call	0xa6	; 0xa6 <appendSerial>
	if(serialWritePos >= TX_BUFFER_size){
		serialWritePos = 0;
	}
}
void serialWrite(char c[]){ //get string in to buffer 
	for(uint8_t i = 0; i < strlen(c); i++){
  dc:	1f 5f       	subi	r17, 0xFF	; 255
  de:	81 2f       	mov	r24, r17
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	fe 01       	movw	r30, r28
  e4:	01 90       	ld	r0, Z+
  e6:	00 20       	and	r0, r0
  e8:	e9 f7       	brne	.-6      	; 0xe4 <serialWrite+0x20>
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	ec 1b       	sub	r30, r28
  ee:	fd 0b       	sbc	r31, r29
  f0:	8e 17       	cp	r24, r30
  f2:	9f 07       	cpc	r25, r31
  f4:	68 f3       	brcs	.-38     	; 0xd0 <serialWrite+0xc>
		appendSerial(c[i]);
	}
	if(UCSR0A & (1 << UDRE0)){
  f6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  fa:	85 fd       	sbrc	r24, 5
		UDR0 = 0;
  fc:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	}
}
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	1f 91       	pop	r17
 106:	08 95       	ret

00000108 <main>:
int value = 0;

int main(void)
{
	//*************************This is the setup of the USART**********************************************************
	UBRR0H = (BRC >> 8); // This is the USART BAUD generator register. Write the last bits of the value of 'BRC' to this 'UBRR0H' register. In this case 'BRC' is the value required for the BAUD-generator.
 108:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = BRC; // This is also the USART BAUD generator register. Write the value of the 'BRC' to this 'UBRR0L' register.
 10c:	87 e6       	ldi	r24, 0x67	; 103
 10e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	UCSR0B = (1 << TXEN0) |  (1 << TXCIE0) | (1 << RXEN0) | (1 << RXCIE0); // Here, you enable the TX and the RX for the USART communication. Also, you enable the interrupt generated by a complete conversion of your RX. Also enable TX with her specified interrupt.
 112:	88 ed       	ldi	r24, 0xD8	; 216
 114:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // Here, you are using 8-bits data (the 'UCSZ00' bit), and in total 2 stop bits (the 'USBS0' bit).
 118:	86 e0       	ldi	r24, 0x06	; 6
 11a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	


	// *************************This is the setup of the ADC******************************
	// This is done by clearing the global interrupt flag in the SREG register by calling this function 'cli()'.
	DDRB |= (1 << PINB0) | (1 << PINB1) | (1 << PINB2) | (1 << PINB3); // Set the pins 'PB3', 'PB2', 'PB1' and 'PB0' as an output.
 11e:	84 b1       	in	r24, 0x04	; 4
 120:	8f 60       	ori	r24, 0x0F	; 15
 122:	84 b9       	out	0x04, r24	; 4
	DIDR0 |= (1 << ADC0D); // Here you have to disable the digital input of a specific pin to use it as an ADC. In this case, the digital input op 'ADC0D' is disabled.
 124:	ee e7       	ldi	r30, 0x7E	; 126
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	81 60       	ori	r24, 0x01	; 1
 12c:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0) | (1 << ADLAR); // This is the ADC Multiplexer Selection register. Here you can enable the right multiplexer of the ADC. We are using ADC0.
 12e:	ec e7       	ldi	r30, 0x7C	; 124
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	80 66       	ori	r24, 0x60	; 96
 136:	80 83       	st	Z, r24
	// We are also using the internal voltage reference (AVcc) i
	
	// The ADLAR (ADC Left Adjust Result) bit is written to one. The ADLAR bit affects the presentation of the ADC conversion result in the ADC Data Register.
	// Write one to ADLAR to left adjust the result. Otherwise, the result is right adjusted.
	// Because we are storing a 10-bits result in 8-bits register, we have to use two register. The ADCH and ADCL register. Now the result is right aligned.
	ADCSRA |= (1 << ADEN) | (1 << ADATE) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // This is the ADC Status and Control Register A. Here you enable the ADC by writing a '1' to the ADEN bit.
 138:	ea e7       	ldi	r30, 0x7A	; 122
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	8f 6a       	ori	r24, 0xAF	; 175
 140:	80 83       	st	Z, r24
	// We are also using an interrupt that will be fired when a conversion in complete.
	// In order to retrieve the right speed of the ADC (125 KHz), we are using a prescaler of '128'.
	// Here the free running mode of the ADC is also enabled. This is by writing the 'ADIE' bit.
	// Pay attention! When writing this bit to one, you have to select its mode in the 'ADCSRB' register.
	ADCSRB |= (0 << ADPS2) | (0 << ADPS1) | (0 << ADPS0); // Here the ADC is in free running mode (see the corresponding table in the data sheet). You can also write 'ADCRSB = 0b0', but this is much clearer to me.
 142:	ab e7       	ldi	r26, 0x7B	; 123
 144:	b0 e0       	ldi	r27, 0x00	; 0
 146:	8c 91       	ld	r24, X
 148:	8c 93       	st	X, r24
	sei(); // This statement enables all interrupts. You're setting the global interrupt flag.
 14a:	78 94       	sei
	// This allows you to use the interrupts to interrupt your code. In order to properly complete their own 'interrupt service routine'.
	// This is done by setting the global interrupt flag in the SREG register by calling this function 'sei()'.
	ADCSRA |= (1 << ADSC); // Start your first conversion. After this, the ADC will keep running automatically.
 14c:	80 81       	ld	r24, Z
 14e:	80 64       	ori	r24, 0x40	; 64
 150:	80 83       	st	Z, r24
	// This is your while loop (infinite loop).
	
	sei();
 152:	78 94       	sei
	UDR0 = 0;
 154:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	serialWrite("Welkom to me test project \r\n");//too welkom the user 
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	0e 94 62 00 	call	0xc4	; 0xc4 <serialWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 160:	2f ed       	ldi	r18, 0xDF	; 223
 162:	83 e9       	ldi	r24, 0x93	; 147
 164:	94 e0       	ldi	r25, 0x04	; 4
 166:	21 50       	subi	r18, 0x01	; 1
 168:	80 40       	sbci	r24, 0x00	; 0
 16a:	90 40       	sbci	r25, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <main+0x5e>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0x68>
 170:	00 00       	nop
	_delay_ms(1500);
		serialWrite("The value of the adc is:\r\n"); //to inform the user what there looking at
 172:	8d e1       	ldi	r24, 0x1D	; 29
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	0e 94 62 00 	call	0xc4	; 0xc4 <serialWrite>
 17a:	2f ed       	ldi	r18, 0xDF	; 223
 17c:	83 e9       	ldi	r24, 0x93	; 147
 17e:	94 e0       	ldi	r25, 0x04	; 4
 180:	21 50       	subi	r18, 0x01	; 1
 182:	80 40       	sbci	r24, 0x00	; 0
 184:	90 40       	sbci	r25, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <main+0x78>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0x82>
 18a:	00 00       	nop
 18c:	2f e1       	ldi	r18, 0x1F	; 31
 18e:	81 ea       	ldi	r24, 0xA1	; 161
 190:	97 e0       	ldi	r25, 0x07	; 7
 192:	21 50       	subi	r18, 0x01	; 1
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0x8a>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x94>
 19c:	00 00       	nop
		_delay_ms(1500);
		
	while (true)
	{
		_delay_ms(2500);
		serialWrite(string); //the value of de adc		
 19e:	8e e3       	ldi	r24, 0x3E	; 62
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	0e 94 62 00 	call	0xc4	; 0xc4 <serialWrite>
 1a6:	f2 cf       	rjmp	.-28     	; 0x18c <main+0x84>

000001a8 <__vector_20>:
	if(UCSR0A & (1 << UDRE0)){
		UDR0 = 0;
	}
}
ISR(USART_TX_vect) // You can also use USART_UDRE_vect, but you have to set the correct bit in the USCR0B register.
{
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	ef 93       	push	r30
 1ba:	ff 93       	push	r31
 1bc:	2f e9       	ldi	r18, 0x9F	; 159
 1be:	86 e8       	ldi	r24, 0x86	; 134
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	21 50       	subi	r18, 0x01	; 1
 1c4:	80 40       	sbci	r24, 0x00	; 0
 1c6:	90 40       	sbci	r25, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <__vector_20+0x1a>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <__vector_20+0x24>
 1cc:	00 00       	nop
	_delay_ms(500);
	if(serialReadPos != serialWritePos){
 1ce:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <serialReadPos>
 1d2:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
 1d6:	e8 17       	cp	r30, r24
 1d8:	79 f0       	breq	.+30     	; 0x1f8 <__vector_20+0x50>
		UDR0 = serialbufffer[serialReadPos];// Write the 'analog_value' to your 'UDR0'-register to send new data through the USART.
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	e2 54       	subi	r30, 0x42	; 66
 1de:	fe 4f       	sbci	r31, 0xFE	; 254
 1e0:	80 81       	ld	r24, Z
 1e2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		serialReadPos++;
 1e6:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <serialReadPos>
 1ea:	8f 5f       	subi	r24, 0xFF	; 255
 1ec:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <serialReadPos>
		if (serialReadPos >= TX_BUFFER_size)
 1f0:	88 23       	and	r24, r24
 1f2:	14 f4       	brge	.+4      	; 0x1f8 <__vector_20+0x50>
		{
			serialReadPos = 0;
 1f4:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <serialReadPos>
		}
	}
}
 1f8:	ff 91       	pop	r31
 1fa:	ef 91       	pop	r30
 1fc:	9f 91       	pop	r25
 1fe:	8f 91       	pop	r24
 200:	2f 91       	pop	r18
 202:	0f 90       	pop	r0
 204:	0f be       	out	0x3f, r0	; 63
 206:	0f 90       	pop	r0
 208:	1f 90       	pop	r1
 20a:	18 95       	reti

0000020c <__vector_18>:

ISR(USART_RX_vect){
 20c:	1f 92       	push	r1
 20e:	0f 92       	push	r0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	0f 92       	push	r0
 214:	11 24       	eor	r1, r1
 216:	8f 93       	push	r24
			PORTB = UDR0;		
 218:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 21c:	85 b9       	out	0x05, r24	; 5
		UCSR0A = (1	<< TXC0); 
 21e:	80 e4       	ldi	r24, 0x40	; 64
 220:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
}
 224:	8f 91       	pop	r24
 226:	0f 90       	pop	r0
 228:	0f be       	out	0x3f, r0	; 63
 22a:	0f 90       	pop	r0
 22c:	1f 90       	pop	r1
 22e:	18 95       	reti

00000230 <__vector_21>:
ISR(ADC_vect)
{
 230:	1f 92       	push	r1
 232:	0f 92       	push	r0
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	0f 92       	push	r0
 238:	11 24       	eor	r1, r1
 23a:	2f 93       	push	r18
 23c:	3f 93       	push	r19
 23e:	4f 93       	push	r20
 240:	5f 93       	push	r21
 242:	6f 93       	push	r22
 244:	7f 93       	push	r23
 246:	8f 93       	push	r24
 248:	9f 93       	push	r25
 24a:	af 93       	push	r26
 24c:	bf 93       	push	r27
 24e:	ef 93       	push	r30
 250:	ff 93       	push	r31
	//PORTB = ((MASK_MSB & ADCH) >> NIBBLE); // Read the ADCH register. In the left nibble contains your MSB values. Apply a bit-mask, and shift the result to the right. Then you can display the results on your LEDs.
	sprintf(string, "%d", ((MASK_MSB & ADCH) >> NIBBLE));//put value of PORTB as a string so print out on the monitor
 252:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 256:	82 95       	swap	r24
 258:	8f 70       	andi	r24, 0x0F	; 15
 25a:	1f 92       	push	r1
 25c:	8f 93       	push	r24
 25e:	88 e3       	ldi	r24, 0x38	; 56
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	9f 93       	push	r25
 264:	8f 93       	push	r24
 266:	8e e3       	ldi	r24, 0x3E	; 62
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	9f 93       	push	r25
 26c:	8f 93       	push	r24
 26e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <sprintf>
 272:	0f 90       	pop	r0
 274:	0f 90       	pop	r0
 276:	0f 90       	pop	r0
 278:	0f 90       	pop	r0
 27a:	0f 90       	pop	r0
 27c:	0f 90       	pop	r0
 27e:	ff 91       	pop	r31
 280:	ef 91       	pop	r30
 282:	bf 91       	pop	r27
 284:	af 91       	pop	r26
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	7f 91       	pop	r23
 28c:	6f 91       	pop	r22
 28e:	5f 91       	pop	r21
 290:	4f 91       	pop	r20
 292:	3f 91       	pop	r19
 294:	2f 91       	pop	r18
 296:	0f 90       	pop	r0
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0f 90       	pop	r0
 29c:	1f 90       	pop	r1
 29e:	18 95       	reti

000002a0 <sprintf>:
 2a0:	ae e0       	ldi	r26, 0x0E	; 14
 2a2:	b0 e0       	ldi	r27, 0x00	; 0
 2a4:	e6 e5       	ldi	r30, 0x56	; 86
 2a6:	f1 e0       	ldi	r31, 0x01	; 1
 2a8:	0c 94 11 04 	jmp	0x822	; 0x822 <__prologue_saves__+0x1c>
 2ac:	0d 89       	ldd	r16, Y+21	; 0x15
 2ae:	1e 89       	ldd	r17, Y+22	; 0x16
 2b0:	86 e0       	ldi	r24, 0x06	; 6
 2b2:	8c 83       	std	Y+4, r24	; 0x04
 2b4:	1a 83       	std	Y+2, r17	; 0x02
 2b6:	09 83       	std	Y+1, r16	; 0x01
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	9f e7       	ldi	r25, 0x7F	; 127
 2bc:	9e 83       	std	Y+6, r25	; 0x06
 2be:	8d 83       	std	Y+5, r24	; 0x05
 2c0:	ae 01       	movw	r20, r28
 2c2:	47 5e       	subi	r20, 0xE7	; 231
 2c4:	5f 4f       	sbci	r21, 0xFF	; 255
 2c6:	6f 89       	ldd	r22, Y+23	; 0x17
 2c8:	78 8d       	ldd	r23, Y+24	; 0x18
 2ca:	ce 01       	movw	r24, r28
 2cc:	01 96       	adiw	r24, 0x01	; 1
 2ce:	0e 94 72 01 	call	0x2e4	; 0x2e4 <vfprintf>
 2d2:	ef 81       	ldd	r30, Y+7	; 0x07
 2d4:	f8 85       	ldd	r31, Y+8	; 0x08
 2d6:	e0 0f       	add	r30, r16
 2d8:	f1 1f       	adc	r31, r17
 2da:	10 82       	st	Z, r1
 2dc:	2e 96       	adiw	r28, 0x0e	; 14
 2de:	e4 e0       	ldi	r30, 0x04	; 4
 2e0:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__epilogue_restores__+0x1c>

000002e4 <vfprintf>:
 2e4:	ab e0       	ldi	r26, 0x0B	; 11
 2e6:	b0 e0       	ldi	r27, 0x00	; 0
 2e8:	e8 e7       	ldi	r30, 0x78	; 120
 2ea:	f1 e0       	ldi	r31, 0x01	; 1
 2ec:	0c 94 03 04 	jmp	0x806	; 0x806 <__prologue_saves__>
 2f0:	6c 01       	movw	r12, r24
 2f2:	7b 01       	movw	r14, r22
 2f4:	8a 01       	movw	r16, r20
 2f6:	fc 01       	movw	r30, r24
 2f8:	17 82       	std	Z+7, r1	; 0x07
 2fa:	16 82       	std	Z+6, r1	; 0x06
 2fc:	83 81       	ldd	r24, Z+3	; 0x03
 2fe:	81 ff       	sbrs	r24, 1
 300:	cc c1       	rjmp	.+920    	; 0x69a <__EEPROM_REGION_LENGTH__+0x29a>
 302:	ce 01       	movw	r24, r28
 304:	01 96       	adiw	r24, 0x01	; 1
 306:	3c 01       	movw	r6, r24
 308:	f6 01       	movw	r30, r12
 30a:	93 81       	ldd	r25, Z+3	; 0x03
 30c:	f7 01       	movw	r30, r14
 30e:	93 fd       	sbrc	r25, 3
 310:	85 91       	lpm	r24, Z+
 312:	93 ff       	sbrs	r25, 3
 314:	81 91       	ld	r24, Z+
 316:	7f 01       	movw	r14, r30
 318:	88 23       	and	r24, r24
 31a:	09 f4       	brne	.+2      	; 0x31e <vfprintf+0x3a>
 31c:	ba c1       	rjmp	.+884    	; 0x692 <__EEPROM_REGION_LENGTH__+0x292>
 31e:	85 32       	cpi	r24, 0x25	; 37
 320:	39 f4       	brne	.+14     	; 0x330 <vfprintf+0x4c>
 322:	93 fd       	sbrc	r25, 3
 324:	85 91       	lpm	r24, Z+
 326:	93 ff       	sbrs	r25, 3
 328:	81 91       	ld	r24, Z+
 32a:	7f 01       	movw	r14, r30
 32c:	85 32       	cpi	r24, 0x25	; 37
 32e:	29 f4       	brne	.+10     	; 0x33a <vfprintf+0x56>
 330:	b6 01       	movw	r22, r12
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0e 94 69 03 	call	0x6d2	; 0x6d2 <fputc>
 338:	e7 cf       	rjmp	.-50     	; 0x308 <vfprintf+0x24>
 33a:	91 2c       	mov	r9, r1
 33c:	21 2c       	mov	r2, r1
 33e:	31 2c       	mov	r3, r1
 340:	ff e1       	ldi	r31, 0x1F	; 31
 342:	f3 15       	cp	r31, r3
 344:	d8 f0       	brcs	.+54     	; 0x37c <vfprintf+0x98>
 346:	8b 32       	cpi	r24, 0x2B	; 43
 348:	79 f0       	breq	.+30     	; 0x368 <vfprintf+0x84>
 34a:	38 f4       	brcc	.+14     	; 0x35a <vfprintf+0x76>
 34c:	80 32       	cpi	r24, 0x20	; 32
 34e:	79 f0       	breq	.+30     	; 0x36e <vfprintf+0x8a>
 350:	83 32       	cpi	r24, 0x23	; 35
 352:	a1 f4       	brne	.+40     	; 0x37c <vfprintf+0x98>
 354:	23 2d       	mov	r18, r3
 356:	20 61       	ori	r18, 0x10	; 16
 358:	1d c0       	rjmp	.+58     	; 0x394 <vfprintf+0xb0>
 35a:	8d 32       	cpi	r24, 0x2D	; 45
 35c:	61 f0       	breq	.+24     	; 0x376 <vfprintf+0x92>
 35e:	80 33       	cpi	r24, 0x30	; 48
 360:	69 f4       	brne	.+26     	; 0x37c <vfprintf+0x98>
 362:	23 2d       	mov	r18, r3
 364:	21 60       	ori	r18, 0x01	; 1
 366:	16 c0       	rjmp	.+44     	; 0x394 <vfprintf+0xb0>
 368:	83 2d       	mov	r24, r3
 36a:	82 60       	ori	r24, 0x02	; 2
 36c:	38 2e       	mov	r3, r24
 36e:	e3 2d       	mov	r30, r3
 370:	e4 60       	ori	r30, 0x04	; 4
 372:	3e 2e       	mov	r3, r30
 374:	2a c0       	rjmp	.+84     	; 0x3ca <vfprintf+0xe6>
 376:	f3 2d       	mov	r31, r3
 378:	f8 60       	ori	r31, 0x08	; 8
 37a:	1d c0       	rjmp	.+58     	; 0x3b6 <vfprintf+0xd2>
 37c:	37 fc       	sbrc	r3, 7
 37e:	2d c0       	rjmp	.+90     	; 0x3da <vfprintf+0xf6>
 380:	20 ed       	ldi	r18, 0xD0	; 208
 382:	28 0f       	add	r18, r24
 384:	2a 30       	cpi	r18, 0x0A	; 10
 386:	40 f0       	brcs	.+16     	; 0x398 <vfprintf+0xb4>
 388:	8e 32       	cpi	r24, 0x2E	; 46
 38a:	b9 f4       	brne	.+46     	; 0x3ba <vfprintf+0xd6>
 38c:	36 fc       	sbrc	r3, 6
 38e:	81 c1       	rjmp	.+770    	; 0x692 <__EEPROM_REGION_LENGTH__+0x292>
 390:	23 2d       	mov	r18, r3
 392:	20 64       	ori	r18, 0x40	; 64
 394:	32 2e       	mov	r3, r18
 396:	19 c0       	rjmp	.+50     	; 0x3ca <vfprintf+0xe6>
 398:	36 fe       	sbrs	r3, 6
 39a:	06 c0       	rjmp	.+12     	; 0x3a8 <vfprintf+0xc4>
 39c:	8a e0       	ldi	r24, 0x0A	; 10
 39e:	98 9e       	mul	r9, r24
 3a0:	20 0d       	add	r18, r0
 3a2:	11 24       	eor	r1, r1
 3a4:	92 2e       	mov	r9, r18
 3a6:	11 c0       	rjmp	.+34     	; 0x3ca <vfprintf+0xe6>
 3a8:	ea e0       	ldi	r30, 0x0A	; 10
 3aa:	2e 9e       	mul	r2, r30
 3ac:	20 0d       	add	r18, r0
 3ae:	11 24       	eor	r1, r1
 3b0:	22 2e       	mov	r2, r18
 3b2:	f3 2d       	mov	r31, r3
 3b4:	f0 62       	ori	r31, 0x20	; 32
 3b6:	3f 2e       	mov	r3, r31
 3b8:	08 c0       	rjmp	.+16     	; 0x3ca <vfprintf+0xe6>
 3ba:	8c 36       	cpi	r24, 0x6C	; 108
 3bc:	21 f4       	brne	.+8      	; 0x3c6 <vfprintf+0xe2>
 3be:	83 2d       	mov	r24, r3
 3c0:	80 68       	ori	r24, 0x80	; 128
 3c2:	38 2e       	mov	r3, r24
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <vfprintf+0xe6>
 3c6:	88 36       	cpi	r24, 0x68	; 104
 3c8:	41 f4       	brne	.+16     	; 0x3da <vfprintf+0xf6>
 3ca:	f7 01       	movw	r30, r14
 3cc:	93 fd       	sbrc	r25, 3
 3ce:	85 91       	lpm	r24, Z+
 3d0:	93 ff       	sbrs	r25, 3
 3d2:	81 91       	ld	r24, Z+
 3d4:	7f 01       	movw	r14, r30
 3d6:	81 11       	cpse	r24, r1
 3d8:	b3 cf       	rjmp	.-154    	; 0x340 <vfprintf+0x5c>
 3da:	98 2f       	mov	r25, r24
 3dc:	9f 7d       	andi	r25, 0xDF	; 223
 3de:	95 54       	subi	r25, 0x45	; 69
 3e0:	93 30       	cpi	r25, 0x03	; 3
 3e2:	28 f4       	brcc	.+10     	; 0x3ee <vfprintf+0x10a>
 3e4:	0c 5f       	subi	r16, 0xFC	; 252
 3e6:	1f 4f       	sbci	r17, 0xFF	; 255
 3e8:	9f e3       	ldi	r25, 0x3F	; 63
 3ea:	99 83       	std	Y+1, r25	; 0x01
 3ec:	0d c0       	rjmp	.+26     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3ee:	83 36       	cpi	r24, 0x63	; 99
 3f0:	31 f0       	breq	.+12     	; 0x3fe <vfprintf+0x11a>
 3f2:	83 37       	cpi	r24, 0x73	; 115
 3f4:	71 f0       	breq	.+28     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 3f6:	83 35       	cpi	r24, 0x53	; 83
 3f8:	09 f0       	breq	.+2      	; 0x3fc <vfprintf+0x118>
 3fa:	59 c0       	rjmp	.+178    	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 3fc:	21 c0       	rjmp	.+66     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 3fe:	f8 01       	movw	r30, r16
 400:	80 81       	ld	r24, Z
 402:	89 83       	std	Y+1, r24	; 0x01
 404:	0e 5f       	subi	r16, 0xFE	; 254
 406:	1f 4f       	sbci	r17, 0xFF	; 255
 408:	88 24       	eor	r8, r8
 40a:	83 94       	inc	r8
 40c:	91 2c       	mov	r9, r1
 40e:	53 01       	movw	r10, r6
 410:	13 c0       	rjmp	.+38     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 412:	28 01       	movw	r4, r16
 414:	f2 e0       	ldi	r31, 0x02	; 2
 416:	4f 0e       	add	r4, r31
 418:	51 1c       	adc	r5, r1
 41a:	f8 01       	movw	r30, r16
 41c:	a0 80       	ld	r10, Z
 41e:	b1 80       	ldd	r11, Z+1	; 0x01
 420:	36 fe       	sbrs	r3, 6
 422:	03 c0       	rjmp	.+6      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 424:	69 2d       	mov	r22, r9
 426:	70 e0       	ldi	r23, 0x00	; 0
 428:	02 c0       	rjmp	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42a:	6f ef       	ldi	r22, 0xFF	; 255
 42c:	7f ef       	ldi	r23, 0xFF	; 255
 42e:	c5 01       	movw	r24, r10
 430:	0e 94 5e 03 	call	0x6bc	; 0x6bc <strnlen>
 434:	4c 01       	movw	r8, r24
 436:	82 01       	movw	r16, r4
 438:	f3 2d       	mov	r31, r3
 43a:	ff 77       	andi	r31, 0x7F	; 127
 43c:	3f 2e       	mov	r3, r31
 43e:	16 c0       	rjmp	.+44     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 440:	28 01       	movw	r4, r16
 442:	22 e0       	ldi	r18, 0x02	; 2
 444:	42 0e       	add	r4, r18
 446:	51 1c       	adc	r5, r1
 448:	f8 01       	movw	r30, r16
 44a:	a0 80       	ld	r10, Z
 44c:	b1 80       	ldd	r11, Z+1	; 0x01
 44e:	36 fe       	sbrs	r3, 6
 450:	03 c0       	rjmp	.+6      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 452:	69 2d       	mov	r22, r9
 454:	70 e0       	ldi	r23, 0x00	; 0
 456:	02 c0       	rjmp	.+4      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 458:	6f ef       	ldi	r22, 0xFF	; 255
 45a:	7f ef       	ldi	r23, 0xFF	; 255
 45c:	c5 01       	movw	r24, r10
 45e:	0e 94 53 03 	call	0x6a6	; 0x6a6 <strnlen_P>
 462:	4c 01       	movw	r8, r24
 464:	f3 2d       	mov	r31, r3
 466:	f0 68       	ori	r31, 0x80	; 128
 468:	3f 2e       	mov	r3, r31
 46a:	82 01       	movw	r16, r4
 46c:	33 fc       	sbrc	r3, 3
 46e:	1b c0       	rjmp	.+54     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 470:	82 2d       	mov	r24, r2
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	88 16       	cp	r8, r24
 476:	99 06       	cpc	r9, r25
 478:	b0 f4       	brcc	.+44     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 47a:	b6 01       	movw	r22, r12
 47c:	80 e2       	ldi	r24, 0x20	; 32
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	0e 94 69 03 	call	0x6d2	; 0x6d2 <fputc>
 484:	2a 94       	dec	r2
 486:	f4 cf       	rjmp	.-24     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 488:	f5 01       	movw	r30, r10
 48a:	37 fc       	sbrc	r3, 7
 48c:	85 91       	lpm	r24, Z+
 48e:	37 fe       	sbrs	r3, 7
 490:	81 91       	ld	r24, Z+
 492:	5f 01       	movw	r10, r30
 494:	b6 01       	movw	r22, r12
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0e 94 69 03 	call	0x6d2	; 0x6d2 <fputc>
 49c:	21 10       	cpse	r2, r1
 49e:	2a 94       	dec	r2
 4a0:	21 e0       	ldi	r18, 0x01	; 1
 4a2:	82 1a       	sub	r8, r18
 4a4:	91 08       	sbc	r9, r1
 4a6:	81 14       	cp	r8, r1
 4a8:	91 04       	cpc	r9, r1
 4aa:	71 f7       	brne	.-36     	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 4ac:	e8 c0       	rjmp	.+464    	; 0x67e <__EEPROM_REGION_LENGTH__+0x27e>
 4ae:	84 36       	cpi	r24, 0x64	; 100
 4b0:	11 f0       	breq	.+4      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4b2:	89 36       	cpi	r24, 0x69	; 105
 4b4:	41 f5       	brne	.+80     	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
 4b6:	f8 01       	movw	r30, r16
 4b8:	37 fe       	sbrs	r3, 7
 4ba:	07 c0       	rjmp	.+14     	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 4bc:	60 81       	ld	r22, Z
 4be:	71 81       	ldd	r23, Z+1	; 0x01
 4c0:	82 81       	ldd	r24, Z+2	; 0x02
 4c2:	93 81       	ldd	r25, Z+3	; 0x03
 4c4:	0c 5f       	subi	r16, 0xFC	; 252
 4c6:	1f 4f       	sbci	r17, 0xFF	; 255
 4c8:	08 c0       	rjmp	.+16     	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 4ca:	60 81       	ld	r22, Z
 4cc:	71 81       	ldd	r23, Z+1	; 0x01
 4ce:	07 2e       	mov	r0, r23
 4d0:	00 0c       	add	r0, r0
 4d2:	88 0b       	sbc	r24, r24
 4d4:	99 0b       	sbc	r25, r25
 4d6:	0e 5f       	subi	r16, 0xFE	; 254
 4d8:	1f 4f       	sbci	r17, 0xFF	; 255
 4da:	f3 2d       	mov	r31, r3
 4dc:	ff 76       	andi	r31, 0x6F	; 111
 4de:	3f 2e       	mov	r3, r31
 4e0:	97 ff       	sbrs	r25, 7
 4e2:	09 c0       	rjmp	.+18     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 4e4:	90 95       	com	r25
 4e6:	80 95       	com	r24
 4e8:	70 95       	com	r23
 4ea:	61 95       	neg	r22
 4ec:	7f 4f       	sbci	r23, 0xFF	; 255
 4ee:	8f 4f       	sbci	r24, 0xFF	; 255
 4f0:	9f 4f       	sbci	r25, 0xFF	; 255
 4f2:	f0 68       	ori	r31, 0x80	; 128
 4f4:	3f 2e       	mov	r3, r31
 4f6:	2a e0       	ldi	r18, 0x0A	; 10
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	a3 01       	movw	r20, r6
 4fc:	0e 94 a5 03 	call	0x74a	; 0x74a <__ultoa_invert>
 500:	88 2e       	mov	r8, r24
 502:	86 18       	sub	r8, r6
 504:	45 c0       	rjmp	.+138    	; 0x590 <__EEPROM_REGION_LENGTH__+0x190>
 506:	85 37       	cpi	r24, 0x75	; 117
 508:	31 f4       	brne	.+12     	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
 50a:	23 2d       	mov	r18, r3
 50c:	2f 7e       	andi	r18, 0xEF	; 239
 50e:	b2 2e       	mov	r11, r18
 510:	2a e0       	ldi	r18, 0x0A	; 10
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	25 c0       	rjmp	.+74     	; 0x560 <__EEPROM_REGION_LENGTH__+0x160>
 516:	93 2d       	mov	r25, r3
 518:	99 7f       	andi	r25, 0xF9	; 249
 51a:	b9 2e       	mov	r11, r25
 51c:	8f 36       	cpi	r24, 0x6F	; 111
 51e:	c1 f0       	breq	.+48     	; 0x550 <__EEPROM_REGION_LENGTH__+0x150>
 520:	18 f4       	brcc	.+6      	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
 522:	88 35       	cpi	r24, 0x58	; 88
 524:	79 f0       	breq	.+30     	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
 526:	b5 c0       	rjmp	.+362    	; 0x692 <__EEPROM_REGION_LENGTH__+0x292>
 528:	80 37       	cpi	r24, 0x70	; 112
 52a:	19 f0       	breq	.+6      	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
 52c:	88 37       	cpi	r24, 0x78	; 120
 52e:	21 f0       	breq	.+8      	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
 530:	b0 c0       	rjmp	.+352    	; 0x692 <__EEPROM_REGION_LENGTH__+0x292>
 532:	e9 2f       	mov	r30, r25
 534:	e0 61       	ori	r30, 0x10	; 16
 536:	be 2e       	mov	r11, r30
 538:	b4 fe       	sbrs	r11, 4
 53a:	0d c0       	rjmp	.+26     	; 0x556 <__EEPROM_REGION_LENGTH__+0x156>
 53c:	fb 2d       	mov	r31, r11
 53e:	f4 60       	ori	r31, 0x04	; 4
 540:	bf 2e       	mov	r11, r31
 542:	09 c0       	rjmp	.+18     	; 0x556 <__EEPROM_REGION_LENGTH__+0x156>
 544:	34 fe       	sbrs	r3, 4
 546:	0a c0       	rjmp	.+20     	; 0x55c <__EEPROM_REGION_LENGTH__+0x15c>
 548:	29 2f       	mov	r18, r25
 54a:	26 60       	ori	r18, 0x06	; 6
 54c:	b2 2e       	mov	r11, r18
 54e:	06 c0       	rjmp	.+12     	; 0x55c <__EEPROM_REGION_LENGTH__+0x15c>
 550:	28 e0       	ldi	r18, 0x08	; 8
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	05 c0       	rjmp	.+10     	; 0x560 <__EEPROM_REGION_LENGTH__+0x160>
 556:	20 e1       	ldi	r18, 0x10	; 16
 558:	30 e0       	ldi	r19, 0x00	; 0
 55a:	02 c0       	rjmp	.+4      	; 0x560 <__EEPROM_REGION_LENGTH__+0x160>
 55c:	20 e1       	ldi	r18, 0x10	; 16
 55e:	32 e0       	ldi	r19, 0x02	; 2
 560:	f8 01       	movw	r30, r16
 562:	b7 fe       	sbrs	r11, 7
 564:	07 c0       	rjmp	.+14     	; 0x574 <__EEPROM_REGION_LENGTH__+0x174>
 566:	60 81       	ld	r22, Z
 568:	71 81       	ldd	r23, Z+1	; 0x01
 56a:	82 81       	ldd	r24, Z+2	; 0x02
 56c:	93 81       	ldd	r25, Z+3	; 0x03
 56e:	0c 5f       	subi	r16, 0xFC	; 252
 570:	1f 4f       	sbci	r17, 0xFF	; 255
 572:	06 c0       	rjmp	.+12     	; 0x580 <__EEPROM_REGION_LENGTH__+0x180>
 574:	60 81       	ld	r22, Z
 576:	71 81       	ldd	r23, Z+1	; 0x01
 578:	80 e0       	ldi	r24, 0x00	; 0
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	0e 5f       	subi	r16, 0xFE	; 254
 57e:	1f 4f       	sbci	r17, 0xFF	; 255
 580:	a3 01       	movw	r20, r6
 582:	0e 94 a5 03 	call	0x74a	; 0x74a <__ultoa_invert>
 586:	88 2e       	mov	r8, r24
 588:	86 18       	sub	r8, r6
 58a:	fb 2d       	mov	r31, r11
 58c:	ff 77       	andi	r31, 0x7F	; 127
 58e:	3f 2e       	mov	r3, r31
 590:	36 fe       	sbrs	r3, 6
 592:	0d c0       	rjmp	.+26     	; 0x5ae <__EEPROM_REGION_LENGTH__+0x1ae>
 594:	23 2d       	mov	r18, r3
 596:	2e 7f       	andi	r18, 0xFE	; 254
 598:	a2 2e       	mov	r10, r18
 59a:	89 14       	cp	r8, r9
 59c:	58 f4       	brcc	.+22     	; 0x5b4 <__EEPROM_REGION_LENGTH__+0x1b4>
 59e:	34 fe       	sbrs	r3, 4
 5a0:	0b c0       	rjmp	.+22     	; 0x5b8 <__EEPROM_REGION_LENGTH__+0x1b8>
 5a2:	32 fc       	sbrc	r3, 2
 5a4:	09 c0       	rjmp	.+18     	; 0x5b8 <__EEPROM_REGION_LENGTH__+0x1b8>
 5a6:	83 2d       	mov	r24, r3
 5a8:	8e 7e       	andi	r24, 0xEE	; 238
 5aa:	a8 2e       	mov	r10, r24
 5ac:	05 c0       	rjmp	.+10     	; 0x5b8 <__EEPROM_REGION_LENGTH__+0x1b8>
 5ae:	b8 2c       	mov	r11, r8
 5b0:	a3 2c       	mov	r10, r3
 5b2:	03 c0       	rjmp	.+6      	; 0x5ba <__EEPROM_REGION_LENGTH__+0x1ba>
 5b4:	b8 2c       	mov	r11, r8
 5b6:	01 c0       	rjmp	.+2      	; 0x5ba <__EEPROM_REGION_LENGTH__+0x1ba>
 5b8:	b9 2c       	mov	r11, r9
 5ba:	a4 fe       	sbrs	r10, 4
 5bc:	0f c0       	rjmp	.+30     	; 0x5dc <__EEPROM_REGION_LENGTH__+0x1dc>
 5be:	fe 01       	movw	r30, r28
 5c0:	e8 0d       	add	r30, r8
 5c2:	f1 1d       	adc	r31, r1
 5c4:	80 81       	ld	r24, Z
 5c6:	80 33       	cpi	r24, 0x30	; 48
 5c8:	21 f4       	brne	.+8      	; 0x5d2 <__EEPROM_REGION_LENGTH__+0x1d2>
 5ca:	9a 2d       	mov	r25, r10
 5cc:	99 7e       	andi	r25, 0xE9	; 233
 5ce:	a9 2e       	mov	r10, r25
 5d0:	09 c0       	rjmp	.+18     	; 0x5e4 <__EEPROM_REGION_LENGTH__+0x1e4>
 5d2:	a2 fe       	sbrs	r10, 2
 5d4:	06 c0       	rjmp	.+12     	; 0x5e2 <__EEPROM_REGION_LENGTH__+0x1e2>
 5d6:	b3 94       	inc	r11
 5d8:	b3 94       	inc	r11
 5da:	04 c0       	rjmp	.+8      	; 0x5e4 <__EEPROM_REGION_LENGTH__+0x1e4>
 5dc:	8a 2d       	mov	r24, r10
 5de:	86 78       	andi	r24, 0x86	; 134
 5e0:	09 f0       	breq	.+2      	; 0x5e4 <__EEPROM_REGION_LENGTH__+0x1e4>
 5e2:	b3 94       	inc	r11
 5e4:	a3 fc       	sbrc	r10, 3
 5e6:	11 c0       	rjmp	.+34     	; 0x60a <__EEPROM_REGION_LENGTH__+0x20a>
 5e8:	a0 fe       	sbrs	r10, 0
 5ea:	06 c0       	rjmp	.+12     	; 0x5f8 <__EEPROM_REGION_LENGTH__+0x1f8>
 5ec:	b2 14       	cp	r11, r2
 5ee:	88 f4       	brcc	.+34     	; 0x612 <__EEPROM_REGION_LENGTH__+0x212>
 5f0:	28 0c       	add	r2, r8
 5f2:	92 2c       	mov	r9, r2
 5f4:	9b 18       	sub	r9, r11
 5f6:	0e c0       	rjmp	.+28     	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
 5f8:	b2 14       	cp	r11, r2
 5fa:	60 f4       	brcc	.+24     	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
 5fc:	b6 01       	movw	r22, r12
 5fe:	80 e2       	ldi	r24, 0x20	; 32
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	0e 94 69 03 	call	0x6d2	; 0x6d2 <fputc>
 606:	b3 94       	inc	r11
 608:	f7 cf       	rjmp	.-18     	; 0x5f8 <__EEPROM_REGION_LENGTH__+0x1f8>
 60a:	b2 14       	cp	r11, r2
 60c:	18 f4       	brcc	.+6      	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
 60e:	2b 18       	sub	r2, r11
 610:	02 c0       	rjmp	.+4      	; 0x616 <__EEPROM_REGION_LENGTH__+0x216>
 612:	98 2c       	mov	r9, r8
 614:	21 2c       	mov	r2, r1
 616:	a4 fe       	sbrs	r10, 4
 618:	10 c0       	rjmp	.+32     	; 0x63a <__EEPROM_REGION_LENGTH__+0x23a>
 61a:	b6 01       	movw	r22, r12
 61c:	80 e3       	ldi	r24, 0x30	; 48
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	0e 94 69 03 	call	0x6d2	; 0x6d2 <fputc>
 624:	a2 fe       	sbrs	r10, 2
 626:	17 c0       	rjmp	.+46     	; 0x656 <__EEPROM_REGION_LENGTH__+0x256>
 628:	a1 fc       	sbrc	r10, 1
 62a:	03 c0       	rjmp	.+6      	; 0x632 <__EEPROM_REGION_LENGTH__+0x232>
 62c:	88 e7       	ldi	r24, 0x78	; 120
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	02 c0       	rjmp	.+4      	; 0x636 <__EEPROM_REGION_LENGTH__+0x236>
 632:	88 e5       	ldi	r24, 0x58	; 88
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	b6 01       	movw	r22, r12
 638:	0c c0       	rjmp	.+24     	; 0x652 <__EEPROM_REGION_LENGTH__+0x252>
 63a:	8a 2d       	mov	r24, r10
 63c:	86 78       	andi	r24, 0x86	; 134
 63e:	59 f0       	breq	.+22     	; 0x656 <__EEPROM_REGION_LENGTH__+0x256>
 640:	a1 fe       	sbrs	r10, 1
 642:	02 c0       	rjmp	.+4      	; 0x648 <__EEPROM_REGION_LENGTH__+0x248>
 644:	8b e2       	ldi	r24, 0x2B	; 43
 646:	01 c0       	rjmp	.+2      	; 0x64a <__EEPROM_REGION_LENGTH__+0x24a>
 648:	80 e2       	ldi	r24, 0x20	; 32
 64a:	a7 fc       	sbrc	r10, 7
 64c:	8d e2       	ldi	r24, 0x2D	; 45
 64e:	b6 01       	movw	r22, r12
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	0e 94 69 03 	call	0x6d2	; 0x6d2 <fputc>
 656:	89 14       	cp	r8, r9
 658:	38 f4       	brcc	.+14     	; 0x668 <__EEPROM_REGION_LENGTH__+0x268>
 65a:	b6 01       	movw	r22, r12
 65c:	80 e3       	ldi	r24, 0x30	; 48
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	0e 94 69 03 	call	0x6d2	; 0x6d2 <fputc>
 664:	9a 94       	dec	r9
 666:	f7 cf       	rjmp	.-18     	; 0x656 <__EEPROM_REGION_LENGTH__+0x256>
 668:	8a 94       	dec	r8
 66a:	f3 01       	movw	r30, r6
 66c:	e8 0d       	add	r30, r8
 66e:	f1 1d       	adc	r31, r1
 670:	80 81       	ld	r24, Z
 672:	b6 01       	movw	r22, r12
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	0e 94 69 03 	call	0x6d2	; 0x6d2 <fputc>
 67a:	81 10       	cpse	r8, r1
 67c:	f5 cf       	rjmp	.-22     	; 0x668 <__EEPROM_REGION_LENGTH__+0x268>
 67e:	22 20       	and	r2, r2
 680:	09 f4       	brne	.+2      	; 0x684 <__EEPROM_REGION_LENGTH__+0x284>
 682:	42 ce       	rjmp	.-892    	; 0x308 <vfprintf+0x24>
 684:	b6 01       	movw	r22, r12
 686:	80 e2       	ldi	r24, 0x20	; 32
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <fputc>
 68e:	2a 94       	dec	r2
 690:	f6 cf       	rjmp	.-20     	; 0x67e <__EEPROM_REGION_LENGTH__+0x27e>
 692:	f6 01       	movw	r30, r12
 694:	86 81       	ldd	r24, Z+6	; 0x06
 696:	97 81       	ldd	r25, Z+7	; 0x07
 698:	02 c0       	rjmp	.+4      	; 0x69e <__EEPROM_REGION_LENGTH__+0x29e>
 69a:	8f ef       	ldi	r24, 0xFF	; 255
 69c:	9f ef       	ldi	r25, 0xFF	; 255
 69e:	2b 96       	adiw	r28, 0x0b	; 11
 6a0:	e2 e1       	ldi	r30, 0x12	; 18
 6a2:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__epilogue_restores__>

000006a6 <strnlen_P>:
 6a6:	fc 01       	movw	r30, r24
 6a8:	05 90       	lpm	r0, Z+
 6aa:	61 50       	subi	r22, 0x01	; 1
 6ac:	70 40       	sbci	r23, 0x00	; 0
 6ae:	01 10       	cpse	r0, r1
 6b0:	d8 f7       	brcc	.-10     	; 0x6a8 <strnlen_P+0x2>
 6b2:	80 95       	com	r24
 6b4:	90 95       	com	r25
 6b6:	8e 0f       	add	r24, r30
 6b8:	9f 1f       	adc	r25, r31
 6ba:	08 95       	ret

000006bc <strnlen>:
 6bc:	fc 01       	movw	r30, r24
 6be:	61 50       	subi	r22, 0x01	; 1
 6c0:	70 40       	sbci	r23, 0x00	; 0
 6c2:	01 90       	ld	r0, Z+
 6c4:	01 10       	cpse	r0, r1
 6c6:	d8 f7       	brcc	.-10     	; 0x6be <strnlen+0x2>
 6c8:	80 95       	com	r24
 6ca:	90 95       	com	r25
 6cc:	8e 0f       	add	r24, r30
 6ce:	9f 1f       	adc	r25, r31
 6d0:	08 95       	ret

000006d2 <fputc>:
 6d2:	0f 93       	push	r16
 6d4:	1f 93       	push	r17
 6d6:	cf 93       	push	r28
 6d8:	df 93       	push	r29
 6da:	fb 01       	movw	r30, r22
 6dc:	23 81       	ldd	r18, Z+3	; 0x03
 6de:	21 fd       	sbrc	r18, 1
 6e0:	03 c0       	rjmp	.+6      	; 0x6e8 <fputc+0x16>
 6e2:	8f ef       	ldi	r24, 0xFF	; 255
 6e4:	9f ef       	ldi	r25, 0xFF	; 255
 6e6:	2c c0       	rjmp	.+88     	; 0x740 <fputc+0x6e>
 6e8:	22 ff       	sbrs	r18, 2
 6ea:	16 c0       	rjmp	.+44     	; 0x718 <fputc+0x46>
 6ec:	46 81       	ldd	r20, Z+6	; 0x06
 6ee:	57 81       	ldd	r21, Z+7	; 0x07
 6f0:	24 81       	ldd	r18, Z+4	; 0x04
 6f2:	35 81       	ldd	r19, Z+5	; 0x05
 6f4:	42 17       	cp	r20, r18
 6f6:	53 07       	cpc	r21, r19
 6f8:	44 f4       	brge	.+16     	; 0x70a <fputc+0x38>
 6fa:	a0 81       	ld	r26, Z
 6fc:	b1 81       	ldd	r27, Z+1	; 0x01
 6fe:	9d 01       	movw	r18, r26
 700:	2f 5f       	subi	r18, 0xFF	; 255
 702:	3f 4f       	sbci	r19, 0xFF	; 255
 704:	31 83       	std	Z+1, r19	; 0x01
 706:	20 83       	st	Z, r18
 708:	8c 93       	st	X, r24
 70a:	26 81       	ldd	r18, Z+6	; 0x06
 70c:	37 81       	ldd	r19, Z+7	; 0x07
 70e:	2f 5f       	subi	r18, 0xFF	; 255
 710:	3f 4f       	sbci	r19, 0xFF	; 255
 712:	37 83       	std	Z+7, r19	; 0x07
 714:	26 83       	std	Z+6, r18	; 0x06
 716:	14 c0       	rjmp	.+40     	; 0x740 <fputc+0x6e>
 718:	8b 01       	movw	r16, r22
 71a:	ec 01       	movw	r28, r24
 71c:	fb 01       	movw	r30, r22
 71e:	00 84       	ldd	r0, Z+8	; 0x08
 720:	f1 85       	ldd	r31, Z+9	; 0x09
 722:	e0 2d       	mov	r30, r0
 724:	09 95       	icall
 726:	89 2b       	or	r24, r25
 728:	e1 f6       	brne	.-72     	; 0x6e2 <fputc+0x10>
 72a:	d8 01       	movw	r26, r16
 72c:	16 96       	adiw	r26, 0x06	; 6
 72e:	8d 91       	ld	r24, X+
 730:	9c 91       	ld	r25, X
 732:	17 97       	sbiw	r26, 0x07	; 7
 734:	01 96       	adiw	r24, 0x01	; 1
 736:	17 96       	adiw	r26, 0x07	; 7
 738:	9c 93       	st	X, r25
 73a:	8e 93       	st	-X, r24
 73c:	16 97       	sbiw	r26, 0x06	; 6
 73e:	ce 01       	movw	r24, r28
 740:	df 91       	pop	r29
 742:	cf 91       	pop	r28
 744:	1f 91       	pop	r17
 746:	0f 91       	pop	r16
 748:	08 95       	ret

0000074a <__ultoa_invert>:
 74a:	fa 01       	movw	r30, r20
 74c:	aa 27       	eor	r26, r26
 74e:	28 30       	cpi	r18, 0x08	; 8
 750:	51 f1       	breq	.+84     	; 0x7a6 <__ultoa_invert+0x5c>
 752:	20 31       	cpi	r18, 0x10	; 16
 754:	81 f1       	breq	.+96     	; 0x7b6 <__ultoa_invert+0x6c>
 756:	e8 94       	clt
 758:	6f 93       	push	r22
 75a:	6e 7f       	andi	r22, 0xFE	; 254
 75c:	6e 5f       	subi	r22, 0xFE	; 254
 75e:	7f 4f       	sbci	r23, 0xFF	; 255
 760:	8f 4f       	sbci	r24, 0xFF	; 255
 762:	9f 4f       	sbci	r25, 0xFF	; 255
 764:	af 4f       	sbci	r26, 0xFF	; 255
 766:	b1 e0       	ldi	r27, 0x01	; 1
 768:	3e d0       	rcall	.+124    	; 0x7e6 <__ultoa_invert+0x9c>
 76a:	b4 e0       	ldi	r27, 0x04	; 4
 76c:	3c d0       	rcall	.+120    	; 0x7e6 <__ultoa_invert+0x9c>
 76e:	67 0f       	add	r22, r23
 770:	78 1f       	adc	r23, r24
 772:	89 1f       	adc	r24, r25
 774:	9a 1f       	adc	r25, r26
 776:	a1 1d       	adc	r26, r1
 778:	68 0f       	add	r22, r24
 77a:	79 1f       	adc	r23, r25
 77c:	8a 1f       	adc	r24, r26
 77e:	91 1d       	adc	r25, r1
 780:	a1 1d       	adc	r26, r1
 782:	6a 0f       	add	r22, r26
 784:	71 1d       	adc	r23, r1
 786:	81 1d       	adc	r24, r1
 788:	91 1d       	adc	r25, r1
 78a:	a1 1d       	adc	r26, r1
 78c:	20 d0       	rcall	.+64     	; 0x7ce <__ultoa_invert+0x84>
 78e:	09 f4       	brne	.+2      	; 0x792 <__ultoa_invert+0x48>
 790:	68 94       	set
 792:	3f 91       	pop	r19
 794:	2a e0       	ldi	r18, 0x0A	; 10
 796:	26 9f       	mul	r18, r22
 798:	11 24       	eor	r1, r1
 79a:	30 19       	sub	r19, r0
 79c:	30 5d       	subi	r19, 0xD0	; 208
 79e:	31 93       	st	Z+, r19
 7a0:	de f6       	brtc	.-74     	; 0x758 <__ultoa_invert+0xe>
 7a2:	cf 01       	movw	r24, r30
 7a4:	08 95       	ret
 7a6:	46 2f       	mov	r20, r22
 7a8:	47 70       	andi	r20, 0x07	; 7
 7aa:	40 5d       	subi	r20, 0xD0	; 208
 7ac:	41 93       	st	Z+, r20
 7ae:	b3 e0       	ldi	r27, 0x03	; 3
 7b0:	0f d0       	rcall	.+30     	; 0x7d0 <__ultoa_invert+0x86>
 7b2:	c9 f7       	brne	.-14     	; 0x7a6 <__ultoa_invert+0x5c>
 7b4:	f6 cf       	rjmp	.-20     	; 0x7a2 <__ultoa_invert+0x58>
 7b6:	46 2f       	mov	r20, r22
 7b8:	4f 70       	andi	r20, 0x0F	; 15
 7ba:	40 5d       	subi	r20, 0xD0	; 208
 7bc:	4a 33       	cpi	r20, 0x3A	; 58
 7be:	18 f0       	brcs	.+6      	; 0x7c6 <__ultoa_invert+0x7c>
 7c0:	49 5d       	subi	r20, 0xD9	; 217
 7c2:	31 fd       	sbrc	r19, 1
 7c4:	40 52       	subi	r20, 0x20	; 32
 7c6:	41 93       	st	Z+, r20
 7c8:	02 d0       	rcall	.+4      	; 0x7ce <__ultoa_invert+0x84>
 7ca:	a9 f7       	brne	.-22     	; 0x7b6 <__ultoa_invert+0x6c>
 7cc:	ea cf       	rjmp	.-44     	; 0x7a2 <__ultoa_invert+0x58>
 7ce:	b4 e0       	ldi	r27, 0x04	; 4
 7d0:	a6 95       	lsr	r26
 7d2:	97 95       	ror	r25
 7d4:	87 95       	ror	r24
 7d6:	77 95       	ror	r23
 7d8:	67 95       	ror	r22
 7da:	ba 95       	dec	r27
 7dc:	c9 f7       	brne	.-14     	; 0x7d0 <__ultoa_invert+0x86>
 7de:	00 97       	sbiw	r24, 0x00	; 0
 7e0:	61 05       	cpc	r22, r1
 7e2:	71 05       	cpc	r23, r1
 7e4:	08 95       	ret
 7e6:	9b 01       	movw	r18, r22
 7e8:	ac 01       	movw	r20, r24
 7ea:	0a 2e       	mov	r0, r26
 7ec:	06 94       	lsr	r0
 7ee:	57 95       	ror	r21
 7f0:	47 95       	ror	r20
 7f2:	37 95       	ror	r19
 7f4:	27 95       	ror	r18
 7f6:	ba 95       	dec	r27
 7f8:	c9 f7       	brne	.-14     	; 0x7ec <__ultoa_invert+0xa2>
 7fa:	62 0f       	add	r22, r18
 7fc:	73 1f       	adc	r23, r19
 7fe:	84 1f       	adc	r24, r20
 800:	95 1f       	adc	r25, r21
 802:	a0 1d       	adc	r26, r0
 804:	08 95       	ret

00000806 <__prologue_saves__>:
 806:	2f 92       	push	r2
 808:	3f 92       	push	r3
 80a:	4f 92       	push	r4
 80c:	5f 92       	push	r5
 80e:	6f 92       	push	r6
 810:	7f 92       	push	r7
 812:	8f 92       	push	r8
 814:	9f 92       	push	r9
 816:	af 92       	push	r10
 818:	bf 92       	push	r11
 81a:	cf 92       	push	r12
 81c:	df 92       	push	r13
 81e:	ef 92       	push	r14
 820:	ff 92       	push	r15
 822:	0f 93       	push	r16
 824:	1f 93       	push	r17
 826:	cf 93       	push	r28
 828:	df 93       	push	r29
 82a:	cd b7       	in	r28, 0x3d	; 61
 82c:	de b7       	in	r29, 0x3e	; 62
 82e:	ca 1b       	sub	r28, r26
 830:	db 0b       	sbc	r29, r27
 832:	0f b6       	in	r0, 0x3f	; 63
 834:	f8 94       	cli
 836:	de bf       	out	0x3e, r29	; 62
 838:	0f be       	out	0x3f, r0	; 63
 83a:	cd bf       	out	0x3d, r28	; 61
 83c:	09 94       	ijmp

0000083e <__epilogue_restores__>:
 83e:	2a 88       	ldd	r2, Y+18	; 0x12
 840:	39 88       	ldd	r3, Y+17	; 0x11
 842:	48 88       	ldd	r4, Y+16	; 0x10
 844:	5f 84       	ldd	r5, Y+15	; 0x0f
 846:	6e 84       	ldd	r6, Y+14	; 0x0e
 848:	7d 84       	ldd	r7, Y+13	; 0x0d
 84a:	8c 84       	ldd	r8, Y+12	; 0x0c
 84c:	9b 84       	ldd	r9, Y+11	; 0x0b
 84e:	aa 84       	ldd	r10, Y+10	; 0x0a
 850:	b9 84       	ldd	r11, Y+9	; 0x09
 852:	c8 84       	ldd	r12, Y+8	; 0x08
 854:	df 80       	ldd	r13, Y+7	; 0x07
 856:	ee 80       	ldd	r14, Y+6	; 0x06
 858:	fd 80       	ldd	r15, Y+5	; 0x05
 85a:	0c 81       	ldd	r16, Y+4	; 0x04
 85c:	1b 81       	ldd	r17, Y+3	; 0x03
 85e:	aa 81       	ldd	r26, Y+2	; 0x02
 860:	b9 81       	ldd	r27, Y+1	; 0x01
 862:	ce 0f       	add	r28, r30
 864:	d1 1d       	adc	r29, r1
 866:	0f b6       	in	r0, 0x3f	; 63
 868:	f8 94       	cli
 86a:	de bf       	out	0x3e, r29	; 62
 86c:	0f be       	out	0x3f, r0	; 63
 86e:	cd bf       	out	0x3d, r28	; 61
 870:	ed 01       	movw	r28, r26
 872:	08 95       	ret

00000874 <_exit>:
 874:	f8 94       	cli

00000876 <__stop_program>:
 876:	ff cf       	rjmp	.-2      	; 0x876 <__stop_program>
